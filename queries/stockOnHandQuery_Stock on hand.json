{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "stockOnHandQuery",
    "fullyQualifiedName": "QueryBuilder.stockOnHandQuery",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Stock on hand",
    "collectionId": "Stock on hand_QueryBuilder",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n\t\tconst stop = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\")\n\t\tconst bins = JSON.stringify(QueryBuilder.warehouseBinList())\n\t\tconst variables = `bucket = LibreInventoryTransactions\n\t\tstart = 2000-01-01T00:00:00Z \n\t\tstop = `+stop+`\n\t\tbins = `+bins\n\t\t\n\t\t\n\t\tconst query = `\n\t\tfrom(bucket: bucket)\n  |> range(start: start, stop: stop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"inventoryTransaction\")\n  |> filter( fn: (r) => exists r[\"storageLocation.name\"])\n  |> filter(fn: (r) => contains(value: r[\"storageLocation.name\"] ,set: bins)\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> keep(columns: [\"material.code\", \"status.code\", \"carrier.id\", \"storageLocation.name\", \"quantity\"])\n  |> group(columns: [\"material.code\", \"status.code\", \"carrier.id\", \"storageLocation.name\"], mode:\"by\")\n  |> sum(column: \"quantity\")\n\t|> yeild()\n\t`\n\t\t\n\t\treturn variables + query\n\t}",
      "jsArguments": [],
      "isAsync": false
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n\t\tconst stop = moment().format(\"YYYY-MM-DDTHH:mm:ssZ\")\n\t\tconst bins = JSON.stringify(QueryBuilder.warehouseBinList())\n\t\tconst variables = `bucket = LibreInventoryTransactions\n\t\tstart = 2000-01-01T00:00:00Z \n\t\tstop = `+stop+`\n\t\tbins = `+bins\n\t\t\n\t\t\n\t\tconst query = `\n\t\tfrom(bucket: bucket)\n  |> range(start: start, stop: stop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"inventoryTransaction\")\n  |> filter( fn: (r) => exists r[\"storageLocation.name\"])\n  |> filter(fn: (r) => contains(value: r[\"storageLocation.name\"] ,set: bins)\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> keep(columns: [\"material.code\", \"status.code\", \"carrier.id\", \"storageLocation.name\", \"quantity\"])\n  |> group(columns: [\"material.code\", \"status.code\", \"carrier.id\", \"storageLocation.name\"], mode:\"by\")\n  |> sum(column: \"quantity\")\n\t|> yeild()\n\t`\n\t\t\n\t\treturn variables + query\n\t}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Stock on hand_stockOnHandQuery",
  "deleted": false,
  "gitSyncId": "61ada28ad3e4214454c245d4_6216bd2b2882606a1df5d42c"
}